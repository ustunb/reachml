# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main", "iclr2025"]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          cache-local-path: "~/.local"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install the project
        run: uv sync --locked --all-extras

      - name: Run tests
        # For example, using `pytest`
        run: uv run pytest tests

      # - name: Cache poetry install
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.local
      #     key: poetry
      # - uses: snok/install-poetry@v1
      #   with:
      #     version: 1.7.1
      #     virtualenvs-create: true
      #     virtualenvs-in-project: true
      # - name: Cache deps
      #   id: cache-deps
      #   uses: actions/cache@v2
      #   with:
      #     path: .venv
      #     key: pydeps-${{ hashFiles('**/poetry.lock') }}-${{ matrix.python-version }}
      # - run: poetry install --no-interaction --with dev -E cplex
      #   name: Install package
      # - run: poetry run pytest
      #   name: Run tests
